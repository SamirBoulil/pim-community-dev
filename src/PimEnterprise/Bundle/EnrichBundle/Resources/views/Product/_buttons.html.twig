{{ elements.backLink(path('pim_enrich_product_index', { dataLocale: dataLocale })) }}
{% if resource_granted('pim_pdf_generator_product_download') %}
    {{ elements.link('btn.download_pdf', path('pim_pdf_generator_download_product_pdf', { id: product.id, dataLocale: dataLocale }), { icon: 'download', class: 'no-hash', id: 'download-btn'}) }}
{% endif %}
{{ elements.enabledSwitch(form) }}
{% if resource_granted("pim_enrich_product_remove") %}
     {{ elements.deleteLink(
        path('pim_enrich_product_remove', { id: form.vars.value.id }),
        'pim_enrich_product_remove',
        path('pim_enrich_product_index'),
        'confirmation.remove.product'|trans({ '%name%': product.label }),
        'flash.product.removed'|trans
    ) }}
{% endif %}

{% if is_granted(constant('PimEnterprise\\Bundle\\SecurityBundle\\Attributes::OWN'), product) %}
    {{ elements.confirmLink(
        path('pimee_workflow_published_product_publish', {id: form.vars.value.id, dataLocale: dataLocale}),
        path('pim_enrich_product_edit', {id: form.vars.value.id, dataLocale: dataLocale}),
        'flash.product.published'|trans,
        'publish',
        'cloud-upload',
        'confirmation.product.publish'|trans,
        'btn-info'
    ) }}
{% elseif productDraft.inProgress and productDraft.id is not null %}
    {{ elements.link('btn.send for approval', path('pimee_workflow_product_draft_ready', { id: productDraft.id, dataLocale: dataLocale }), {class: 'btn-info'}) }}
{% elseif not productDraft.inProgress %}
    <span href="#" class="btn btn-info disabled">{{ 'btn.sent for approval'|trans }}</span>
{% endif %}

{{ elements.submitDropdownBtn(
    is_granted(constant('PimEnterprise\\Bundle\\SecurityBundle\\Attributes::OWN'), product) ? 'btn.save working copy' : 'btn.save draft',
    {
        'Create': { 'text': 'btn.save and create' },
        'BackGrid': { 'text': 'btn.save and back' }
    }
) }}

{% if resource_granted('pim_pdf_generator_product_download') %}
<script type="text/javascript">
    require(
            ['jquery', 'oro/mediator'],
            function ($, mediator) {
                var initialScope = '{{ product.scope }}',
                    url = '{{ path('pim_pdf_generator_download_product_pdf', { id: product.id, dataLocale: dataLocale }) }}' + '&dataScope=',
                    button = $('#download-btn');

                button.attr('href', url + initialScope);
                mediator.on('scopablefield:changescope', function (scope) {
                    button.attr('href', url + scope);
                }, this);
            }
    );
</script>
{% endif %}
